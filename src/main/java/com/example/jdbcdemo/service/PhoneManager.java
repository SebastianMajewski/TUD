package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Phone;
import com.example.jdbcdemo.domain.Part;

public class PhoneManager 
{
	private Connection connection;
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	private String createTablePhones = "CREATE TABLE "
			+ "Phone(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
			+ "model varchar(50), "
			+ "price double, "
			+ "sold smallint, "
			+ "megapixel int);";

	private String createTableParts = "CREATE TABLE "
			+ "Part(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
			+ "name varchar(50), "
			+ "price double, "
			+ "owner_id int,"
			+ "FOREIGN KEY (owner_id) REFERENCES Phone(id));"
			;
	
	private PreparedStatement addPartStmt;
	private PreparedStatement addPhoneStmt;
	
	private PreparedStatement deletePartStmt;
	private PreparedStatement deleteAllPhonesStmt;
	private PreparedStatement deletePhoneStmt;
	private PreparedStatement deletePartOwnerStmt;
	
	private PreparedStatement getAllPartsStmt;
	private PreparedStatement getAllPhonesStmt;
	
	private PreparedStatement editPhoneStmt;
	
	private Statement statement;

	public PhoneManager() 
	{
		try 
		{
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();
			
			ResultSet rs1 = connection.getMetaData().getTables(null, null, "PHONE", null);

			if (!rs1.next()) 
			{
				statement.executeUpdate(createTablePhones);
			}
			
			ResultSet rs2 = connection.getMetaData().getTables(null, null, "PART", null);

			if (!rs2.next()) 
			{
				statement.executeUpdate(createTableParts);
			}				
			
			addPhoneStmt = connection.prepareStatement("INSERT INTO Phone(model, price, sold, megapixel) VALUES (?, ?, ?, ?)");
			deleteAllPhonesStmt = connection.prepareStatement("DELETE FROM Phone");
			getAllPhonesStmt = connection.prepareStatement("SELECT * FROM Phone");
			editPhoneStmt = connection.prepareStatement("UPDATE Phone SET model = ?, price = ?, sold = ?, megapixel = ? WHERE id = ?");
			deletePhoneStmt = connection.prepareStatement("DELETE FROM Phone WHERE id = ?");

			deletePartOwnerStmt = connection.prepareStatement("DELETE FROM Part WHERE owner_id = ?");
			addPartStmt = connection.prepareStatement("INSERT INTO Part (name, price, owner_id) VALUES (?, ?, ?)");
			deletePartStmt = connection.prepareStatement("DELETE FROM Part");
			getAllPartsStmt = connection.prepareStatement("SELECT * FROM Part WHERE owner_id = ?");
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
	}

	Connection getConnection() 
	{
		return connection;
	}


	void clearParts() 
	{
		try 
		{
			deletePartStmt.executeUpdate();
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
	}
	
	void clearPhones() 
	{
		try 
		{
			this.clearParts();
			deleteAllPhonesStmt.executeUpdate();
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
	}

	public int addPhone(Phone phone) 
	{
		int count = 0;
		try 
		{
			addPhoneStmt.setString(1, phone.getModel());
			addPhoneStmt.setDouble(2, phone.getPrice());
			addPhoneStmt.setBoolean(3, phone.getSold());
			addPhoneStmt.setInt(4, phone.getMegapixels());

			count = addPhoneStmt.executeUpdate();

		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
		return count;
	}
	
	public int editPhone(int id, Phone phone) 
	{
		int count=0;
		try 
		{
			editPhoneStmt.setInt(5, id);
			editPhoneStmt.setString(1, phone.getModel());
			editPhoneStmt.setDouble(2, phone.getPrice());
			editPhoneStmt.setBoolean(3, phone.getSold());
			editPhoneStmt.setInt(4, phone.getMegapixels());

			editPhoneStmt.execute();
		} 
		catch(SQLException e) 
		{
			e.printStackTrace();
		}
		
		return count;
	}
	

	public int addPart(Phone phone, Part part) 
	{
		int count = 0;
		try 
		{
			addPartStmt.setString(1, part.getName());
			addPartStmt.setDouble(2, part.getPrice());
			addPartStmt.setInt(3, phone.getId());
			phone.addPart(part);
			addPartStmt.execute();

		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
		return count;
	}

	public List<Part> getAllParts(int owner) 
	{
		List<Part> parts = new ArrayList<Part>();
		
		try 
		{
			getAllPartsStmt.setInt(1, owner);
			ResultSet rs2 = getAllPartsStmt.executeQuery();
			while (rs2.next()) 
			{
				Part x = new Part();
				x.setId(rs2.getInt("id"));
				x.setName(rs2.getString("name"));
				x.setPrice(rs2.getDouble("price"));
				x.setOwnerId(rs2.getInt("owner_id"));
				parts.add(x);
			}
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
		
		return parts;
	}
	
	public List<Phone> getAllPhones() 
	{
		List<Phone> phones = new ArrayList<Phone>();

		try 
		{
			ResultSet rs = getAllPhonesStmt.executeQuery();

			while (rs.next()) 
			{
				Phone p = new Phone();
				p.setId(rs.getInt("id"));
				p.setModel(rs.getString("model"));
				p.setMegapixels(rs.getInt("megapixel"));
				p.setPrice(rs.getDouble("price"));
				p.setSold(rs.getBoolean("sold"));
				
				getAllPartsStmt.setInt(1, p.getId());
				ResultSet rs2 = getAllPartsStmt.executeQuery();
				while (rs2.next()) 
				{
					Part x = new Part();
					x.setId(rs2.getInt("id"));
					x.setName(rs2.getString("name"));
					x.setPrice(rs2.getDouble("price"));
					x.setOwnerId(rs2.getInt("owner_id"));
					p.addPart(x);
				}
				phones.add(p);
			}
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
		return phones;
	}
	
	public int deletePhone(Phone phone) 
	{
		int count = 0;
		try 
		{
			deletePartOwnerStmt.setInt(1, phone.getId());
			deletePhoneStmt.setInt(1, phone.getId());
			deletePartOwnerStmt.execute();
			deletePhoneStmt.execute();
		}
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
		
		return count;
	}

}
